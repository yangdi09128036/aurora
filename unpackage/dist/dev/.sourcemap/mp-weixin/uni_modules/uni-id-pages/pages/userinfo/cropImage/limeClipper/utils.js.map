{"version":3,"file":"utils.js","sources":["uni_modules/uni-id-pages/pages/userinfo/cropImage/limeClipper/utils.js"],"sourcesContent":["/**\r\n * 判断手指触摸位置\r\n */\r\nexport function determineDirection(clipX, clipY, clipWidth, clipHeight, currentX, currentY) {\r\n\t/*\r\n\t * (右下>>1 右上>>2 左上>>3 左下>>4)\r\n\t */\r\n\tlet corner;\r\n\t/**\r\n\t * 思路：（利用直角坐标系）\r\n\t *  1.找出裁剪框中心点\r\n\t *  2.如点击坐标在上方点与左方点区域内，则点击为左上角\r\n\t *  3.如点击坐标在下方点与右方点区域内，则点击为右下角\r\n\t *  4.其他角同理\r\n\t */\r\n\tconst mainPoint = [clipX + clipWidth / 2, clipY + clipHeight / 2]; // 中心点\r\n\tconst currentPoint = [currentX, currentY]; // 触摸点\r\n\r\n\tif (currentPoint[0] <= mainPoint[0] && currentPoint[1] <= mainPoint[1]) {\r\n\t\tcorner = 3; // 左上\r\n\t} else if (currentPoint[0] >= mainPoint[0] && currentPoint[1] <= mainPoint[1]) {\r\n\t\tcorner = 2; // 右上\r\n\t} else if (currentPoint[0] <= mainPoint[0] && currentPoint[1] >= mainPoint[1]) {\r\n\t\tcorner = 4; // 左下\r\n\t} else if (currentPoint[0] >= mainPoint[0] && currentPoint[1] >= mainPoint[1]) {\r\n\t\tcorner = 1; // 右下\r\n\t}\r\n\r\n\treturn corner;\r\n}\r\n\r\n/**\r\n * 图片边缘检测检测时，计算图片偏移量\r\n */\r\nexport function calcImageOffset(data, scale) {\r\n\tlet left = data.imageLeft;\r\n\tlet top = data.imageTop;\r\n\tscale = scale || data.scale;\r\n\t\r\n\tlet imageWidth = data.imageWidth;\r\n\t  let imageHeight = data.imageHeight;\r\n\t  if ((data.angle / 90) % 2) {\r\n\t    imageWidth = data.imageHeight;\r\n\t    imageHeight = data.imageWidth;\r\n\t  }\r\n\t  const {\r\n\t      clipX,\r\n\t      clipWidth,\r\n\t      clipY,\r\n\t      clipHeight\r\n\t    } = data;\r\n\r\n\t// 当前图片宽度/高度\r\n\tconst currentImageSize = (size) => (size * scale) / 2;\r\n\tconst currentImageWidth = currentImageSize(imageWidth);\r\n\tconst currentImageHeight = currentImageSize(imageHeight);\r\n\r\n\tleft = clipX + currentImageWidth >= left ? left : clipX + currentImageWidth;\r\n\tleft = clipX + clipWidth - currentImageWidth <= left ? left : clipX + clipWidth - currentImageWidth;\r\n\ttop = clipY + currentImageHeight >= top ? top : clipY + currentImageHeight;\r\n\ttop = clipY + clipHeight - currentImageHeight <= top ? top : clipY + clipHeight - currentImageHeight;\r\n\treturn {\r\n\t\tleft,\r\n\t\ttop,\r\n\t\tscale\r\n\t};\r\n}\r\n\r\n/**\r\n * 图片边缘检测时，计算图片缩放比例\r\n */\r\nexport function calcImageScale(data, scale) {\r\n\tscale = scale || data.scale;\r\n\tlet {\r\n\t\timageWidth,\r\n\t\timageHeight,\r\n\t\tclipWidth,\r\n\t\tclipHeight,\r\n\t\tangle\r\n\t} = data\r\n\tif ((angle / 90) % 2) {\r\n\t\timageWidth = imageHeight;\r\n\t\timageHeight = imageWidth;\r\n\t}\r\n\tif (imageWidth * scale < clipWidth) {\r\n\t\tscale = clipWidth / imageWidth;\r\n\t}\r\n\tif (imageHeight * scale < clipHeight) {\r\n\t\tscale = Math.max(scale, clipHeight / imageHeight);\r\n\t}\r\n\treturn scale;\r\n}\r\n\r\n/**\r\n * 计算图片尺寸\r\n */\r\nexport function calcImageSize(width, height, data) {\r\n\tlet imageWidth = width,\r\n\t\timageHeight = height;\r\n\tlet {\r\n\t\tclipWidth,\r\n\t\tclipHeight,\r\n\t\tsysinfo,\r\n\t\twidth: originWidth,\r\n\t\theight: originHeight\r\n\t} = data\r\n\tif (imageWidth && imageHeight) {\r\n\t\tif (imageWidth / imageHeight > (clipWidth || originWidth) / (clipWidth || originHeight)) {\r\n\t\t\timageHeight = clipHeight || originHeight;\r\n\t\t\timageWidth = (width / height) * imageHeight;\r\n\t\t} else {\r\n\t\t\timageWidth = clipWidth || originWidth;\r\n\t\t\timageHeight = (height / width) * imageWidth;\r\n\t\t}\r\n\t} else {\r\n\t\tlet sys = sysinfo || uni.getSystemInfoSync();\r\n\t\timageWidth = sys.windowWidth;\r\n\t\timageHeight = 0;\r\n\t}\r\n\treturn {\r\n\t\timageWidth,\r\n\t\timageHeight\r\n\t};\r\n}\r\n\r\n/**\r\n * 勾股定理求斜边\r\n */\r\nexport function calcPythagoreanTheorem(width, height) {\r\n\treturn Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\r\n}\r\n\r\n/**\r\n * 拖动裁剪框时计算\r\n */\r\nexport function clipTouchMoveOfCalculate(data, event) {\r\n\tconst clientX = event.touches[0].clientX;\r\n\tconst clientY = event.touches[0].clientY;\r\n\r\n\tlet {\r\n\t\tclipWidth,\r\n\t\tclipHeight,\r\n\t\tclipY: oldClipY,\r\n\t\tclipX: oldClipX,\r\n\t\tclipStart,\r\n\t\tisLockRatio,\r\n\t\tmaxWidth,\r\n\t\tminWidth,\r\n\t\tmaxHeight,\r\n\t\tminHeight\r\n\t} = data;\r\n\tmaxWidth = maxWidth / 2;\r\n\tminWidth = minWidth / 2;\r\n\tminHeight = minHeight / 2;\r\n\tmaxHeight = maxHeight / 2;\r\n\r\n\tlet width = clipWidth,\r\n\t\theight = clipHeight,\r\n\t\tclipY = oldClipY,\r\n\t\tclipX = oldClipX,\r\n\t\t// 获取裁剪框实际宽度/高度\r\n\t\t// 如果大于最大值则使用最大值\r\n\t\t// 如果小于最小值则使用最小值\r\n\t\tsizecorrect = () => {\r\n\t\t\twidth = width <= maxWidth ? (width >= minWidth ? width : minWidth) : maxWidth;\r\n\t\t\theight = height <= maxHeight ? (height >= minHeight ? height : minHeight) : maxHeight;\r\n\t\t},\r\n\t\tsizeinspect = () => {\r\n\t\t\tsizecorrect();\r\n\t\t\tif ((width > maxWidth || width < minWidth || height > maxHeight || height < minHeight) && isLockRatio) {\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\t//if (clipStart.corner) {\r\n\theight = clipStart.height + (clipStart.corner > 1 && clipStart.corner < 4 ? 1 : -1) * (clipStart.y - clientY);\r\n\t//}\r\n\tswitch (clipStart.corner) {\r\n\t\tcase 1:\r\n\t\t\twidth = clipStart.width - clipStart.x + clientX;\r\n\t\t\tif (isLockRatio) {\r\n\t\t\t\theight = width / (clipWidth / clipHeight);\r\n\t\t\t}\r\n\t\t\tif (!sizeinspect()) return;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\twidth = clipStart.width - clipStart.x + clientX;\r\n\t\t\tif (isLockRatio) {\r\n\t\t\t\theight = width / (clipWidth / clipHeight);\r\n\t\t\t}\r\n\t\t\tif (!sizeinspect()) {\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\tclipY = clipStart.clipY - (height - clipStart.height);\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\twidth = clipStart.width + clipStart.x - clientX;\r\n\t\t\tif (isLockRatio) {\r\n\t\t\t\theight = width / (clipWidth / clipHeight);\r\n\t\t\t}\r\n\t\t\tif (!sizeinspect()) {\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\tclipY = clipStart.clipY - (height - clipStart.height);\r\n\t\t\t\tclipX = clipStart.clipX - (width - clipStart.width);\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\tcase 4:\r\n\t\t\twidth = clipStart.width + clipStart.x - clientX;\r\n\t\t\tif (isLockRatio) {\r\n\t\t\t\theight = width / (clipWidth / clipHeight);\r\n\t\t\t}\r\n\t\t\tif (!sizeinspect()) {\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\tclipX = clipStart.clipX - (width - clipStart.width);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\treturn {\r\n\t\twidth,\r\n\t\theight,\r\n\t\tclipX,\r\n\t\tclipY\r\n\t};\r\n}\r\n\r\n/**\r\n * 单指拖动图片计算偏移\r\n */\r\nexport function imageTouchMoveOfCalcOffset(data, clientXForLeft, clientYForLeft) {\r\n\tlet left = clientXForLeft - data.touchRelative[0].x,\r\n\t\ttop = clientYForLeft - data.touchRelative[0].y;\r\n\treturn {\r\n\t\tleft,\r\n\t\ttop\r\n\t};\r\n}\r\n"],"names":["uni"],"mappings":"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"}